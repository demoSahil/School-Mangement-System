@model SMS_VO.cls_Teacher_VO

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<!-- Include Selectize CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.13.3/css/selectize.min.css" rel="stylesheet" />
<!-- Include Selectize JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/selectize.js/0.13.3/js/standalone/selectize.min.js"></script>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Edit Teacher Details</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.TeacherId)

        <div class="form-group">
            @Html.LabelFor(model => model.TeacherName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TeacherName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TeacherName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ContactNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContactNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContactNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label> Students Under Teacher</label>
            <select id="userSelect" teacher-id="@Model.TeacherId" multiple="multiple" name="selectedStudents"></select>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<script>

    let usernames = [];
    function FetchAllStudents() {
        /**    Array which consist of objects which represents student entity    */
        let studentsList = [];

        // Getting Students Names List
        const xhr = new XMLHttpRequest();
        xhr.open('GET', '/Student/GetStudentsList', false);
        xhr.onload = () => {
            if (xhr.readyState == xhr.DONE) {
                if (xhr.status === 200)
                studentsList = JSON.parse(xhr.response);
                usernames = studentsList.map((s) => {
                    return s.FirstName + " " + s.LastName + " [" + s.StudentID + "]";
                });


            }
            else {
                console.error("Failed to fetch student list.");
            }
        };
        xhr.send();
    }

    function FetchSelectedStudents() {
        let selectedStudents = [];
        /**    Array which consist of objects which represents student entity    */
        let teacherId = document.getElementById('userSelect').getAttribute('teacher-id');
        // Getting Students Names List
        const xhr = new XMLHttpRequest();
        xhr.open('GET', '/Teacher/StudentsLinkedWithTeacher?TeacherId=' + teacherId + '&returnJson=true', false);
        xhr.onload = () => {
            if (xhr.readyState == xhr.DONE) {
                if (xhr.status === 200)
                studentsList = JSON.parse(xhr.response);
                selectedStudents = studentsList.map((s) => {
                    return s.FirstName + " " + s.LastName + " [" + s.StudentID + "]";
                });
                populateDropdown(selectedStudents);


            }
            else {
                console.error("Failed to fetch student list.");
            }
        };
        xhr.send();


    }

    function populateDropdown(selectedStudents) {
        $('#userSelect').selectize({
            plugins: ['remove_button'],
            delimiter: ',',
            persist: false,
            options: usernames.map(username => ({ value: username, text: username })),
            placeholder: 'Select Students...',
            items: selectedStudents
        });
    }

    FetchAllStudents();
    FetchSelectedStudents();

</script>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
